import java.util.*;
//广度优先做法
class Solution {
    int[] dx = {1, 0, 0, -1};//四个方向的x，y变化量
    int[] dy = {0, 1, -1, 0};

    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int currColor = image[sr][sc]; //currColor：记录初始块的颜色
        if (currColor == color) { //如果开始的点颜色等于想要修改的颜色，说明与它相邻且颜色相同的块也是目标颜色，图像不用修改，直接返回
            return image;
        }
        int n = image.length, m = image[0].length; //n:像素点总数 m:第一排像素点数目(矩阵的边长)
        Queue<int[]> queue = new LinkedList<int[]>(); //创建队列
        queue.offer(new int[]{sr, sc}); //把初始像素添加到队列当中//先添加到队列后染色？
        image[sr][sc] = color;//对初始像素染色
        while (!queue.isEmpty()) { //队列不为空
            int[] cell = queue.poll(); //弹出队列中第一个元素
            int x = cell[0], y = cell[1]; //x，y分别存储当前像素点的坐标
            for (int i = 0; i < 4; i++) {//四个方向
                int mx = x + dx[i], my = y + dy[i]; //定位当前欲修改像素点坐标
                if (mx >= 0 && mx < n && my >= 0 && my < m && image[mx][my] == currColor) {//当该点位于范围内且与初始像素点颜色相同时进行修改
                    queue.offer(new int[]{mx, my}); //修改前把当前点存入队列，下次从此点开始遍历
                    image[mx][my] = color;//进行染色
                }
            }
        }
        return image;
    }
}
